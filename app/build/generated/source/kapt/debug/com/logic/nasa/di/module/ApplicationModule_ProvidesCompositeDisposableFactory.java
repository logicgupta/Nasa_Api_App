// Generated by Dagger (https://dagger.dev).
package com.logic.nasa.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvidesCompositeDisposableFactory implements Factory<CompositeDisposable> {
  private final ApplicationModule module;

  public ApplicationModule_ProvidesCompositeDisposableFactory(ApplicationModule module) {
    this.module = module;
  }

  @Override
  public CompositeDisposable get() {
    return providesCompositeDisposable(module);
  }

  public static ApplicationModule_ProvidesCompositeDisposableFactory create(
      ApplicationModule module) {
    return new ApplicationModule_ProvidesCompositeDisposableFactory(module);
  }

  public static CompositeDisposable providesCompositeDisposable(ApplicationModule instance) {
    return Preconditions.checkNotNull(instance.providesCompositeDisposable(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
