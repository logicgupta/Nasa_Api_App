// Generated by Dagger (https://dagger.dev).
package com.logic.nasa.di.component;

import com.logic.nasa.di.module.ActivityModule;
import com.logic.nasa.di.module.ActivityModule_ProvidesMainModelFactory;
import com.logic.nasa.ui.main.MainActivity;
import com.logic.nasa.ui.main.MainViewModel;
import com.logic.nasa.ui.main.PlayVideoActivity;
import com.logic.nasa.utils.BaseActivity_MembersInjector;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerActivityComponent implements ActivityComponent {
  private final ApplicationComponent applicationComponent;

  private final ActivityModule activityModule;

  private DaggerActivityComponent(ActivityModule activityModuleParam,
      ApplicationComponent applicationComponentParam) {
    this.applicationComponent = applicationComponentParam;
    this.activityModule = activityModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private MainViewModel getMainViewModel() {
    return ActivityModule_ProvidesMainModelFactory.providesMainModel(activityModule, Preconditions.checkNotNull(applicationComponent.getNetworkHelper(), "Cannot return null from a non-@Nullable component method"), Preconditions.checkNotNull(applicationComponent.getCompositeDisposable(), "Cannot return null from a non-@Nullable component method"), Preconditions.checkNotNull(applicationComponent.getMainRepositery(), "Cannot return null from a non-@Nullable component method"));}

  @Override
  public void injectMainActivity(MainActivity activity) {
    injectMainActivity2(activity);}

  @Override
  public void injectPlayVideoActivity(PlayVideoActivity activity) {
    injectPlayVideoActivity2(activity);}

  private MainActivity injectMainActivity2(MainActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, getMainViewModel());
    return instance;
  }

  private PlayVideoActivity injectPlayVideoActivity2(PlayVideoActivity instance) {
    BaseActivity_MembersInjector.injectViewModel(instance, getMainViewModel());
    return instance;
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private ApplicationComponent applicationComponent;

    private Builder() {
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(activityModule, ActivityModule.class);
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new DaggerActivityComponent(activityModule, applicationComponent);
    }
  }
}
